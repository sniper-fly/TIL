
第一章
問題
1)インターネットとwebの違いは？？
2)APIとは？
3)webサーバーとは？
4)ＨＴＴＰとは？
5)webアップとは？
6)webサービスとは？
7)RESTとは？
8)RESTの4原則は？？
9)セマンティックウェブとは？



答え
1)ウェブ:文書閲覧システム, インターネット：コンピュータ同士をつなぐシステムやプロトコル
2)ソフトウェア同士の橋渡しインターフェース。Twitterなどにもある。
	中身がわからなくても入出力が分かれば便利に使えるサーバプログラム。
3)ブラウザからのリクエストを受けて適切な応答をするサーバーのプログラム。apachやnginxなど
4) ウェブコンテンツを表示する書式(ハイパーテキスト)をやり取りする取り決め（プロトコル)
5) 一般の人が使うサービス
6)プログラムが利用するサービス  
7)複数のソフトウェアを連携させるのに適した設計原則。
https://qiita.com/NagaokaKenichi/items/0647c30ef596cedf4bf2 参照
8) アドレス可能性、統一インターフェース、接続性、ステートレス性。
9) 	情報リソースに意味を付与してやって分類するべきという考え方  


第二章
問題
1)ISPとは？
2)プロトコルとは？
3)ポート番号は何のためにある？
4)ポート番号の種類は？
5)DNSとは？
6)ドメインはどう使われる？

解答
1) インターネットサービスプロバイダ。プロバイダがつながっているから、インターネットがつながる。
2) あらかじめやりとりする情報に関する決まり。（データは０と１でやり取りされるし例えば終わりと始まりなどを区別しないといけない
3) サーバーのアドレスがわかっても、サービスを区別する番号が無いと困る。クライアントがアクセスするサービスを区別するための番号。
4) ウェルノウンポート、レジスタードポート（メーカーが使う）、ダイナミックポート。（クライアントが自由に）
5) ユーザがグローバルIPアドレスを覚えなくてもサーバにアクセスできるよう、URLをIPアドレスに変換してくれるサービス。
6) DNSは階層構造になっている。名前解決するとき、ドメインがあると、下位階層のDNSサーバに効率よく振り分けられる。


第三章
問題
1) HTTPの2種類のメッセージと言えば？
2)HTTPメソッドとは？
3)GETとPOSTメソッドの違いは？
4)ステータスコードとは？
5) スリーウェイハンドシェイクとは？
6) HTTPキープアライブとは？
7) HTTPパイプラインとは？
8) SSL/TLSで、webサイトの安全性を確保する3つの仕組みは？
9) SSL/TLSハンドシェイクとは？
10) ステートレスとは？
11)ステートフルとは？
12) セッションとは？
13) URIとは？
14) URL？
15) URN？

解答
1) ブラウザからのHTTPリクエストとサーバーからのHTTPレスポンス
2) HTTPリクエストのリクエスト行に含まれるサーバーに対する要求のこと。
3) GETでデータを送るときはステータス行、URLに情報が含まれるが、POSTではHTTPリクエストのメッセージボディに含まれるため、検索履歴等に残らない。
4) HTTPレスポンスに含まれる、HTTPリクエストに対するサーバーの処理結果の種類を表すコード
5) TCPの通信経路確保の仕組み。SYNパケットで「接続したいです」、ACKパケットで「OKです」という旨の通信を行う。
6) 複数のファイルなどが埋め込まれたＨＴＭＬを一回一回接続を切って読むのではなく一回の接続で全てやりとりする仕組み。
7) ＨＴＴＰリクエストに対して、ＨＴＴＰレスポンスを待たなくても複数のＨＴＴＰリクエストを送って待ち時間を減らして処理できる仕組み
8) 鍵の交換による暗号化通信、メッセージダイジェスト（ハッシュ値）による改竄防止、サーバー証明書によるなりすまし防止の3つ
9) HTTPSで通信を開始するための4つのフェーズ。暗号化方式の決定、通信相手の証明、鍵の交換、暗号化方式の確認、からなる。
10) HTTPでのリクエスト、レスポンスを1往復の完結された処理とみなす。以前の状態を保持しない。
11) ステートレスに対して、以前の状態を保持する仕組み
12) 一連の関連性のある処理の流れのこと。過去のリクエストをまたいで、状態を持つ仕組み。
13) URL,URNの親集合。リソースをidentifyする情報。
14) リソースの場所を示す。
15) リソースの名前を示す。ISBNコードなどで書籍を区別している。


第4章
問題
1)ECMAscriptとは？
2) DOMとは
3) jsonとは？
4) jsonの用途は？
5) フィードとは？
6) マイクロフォーマットとは？
7) エンコード、デコードとは？

解答
1)標準化されたjavascript. 現在はjs = ecmascript
2) HTMLやXML文書を扱いやすくするための手法。document object model
3) javascript object notation.構造化データの記述言語。
4) web上でのデータのやり取り。XMLよりデータファイルが小さく、速い
5) ウェブページの更新情報を配信するためのファイル。登録しておけば、ページにアクセスしなくても最新情報が得られる。
6) HTMLで記述されたウェブページの中に意味を埋め込むための書式。
7) エンコードは情報圧縮、デコードは解凍、伸張すること。


第5章
問題
webアプリの3層アーキテクチャにおける、
1)プレゼンテーション層とは？
2) アプリケーション層とは？
3) データ層とは？

4) MVCモデルとは？
5) modelとは？
6) viewとは？
7) controllerとは？
8) 冗長化とは？
9) webクライアントとは？
10) セッションとは？
11) トランザクションとは？
12) キャッシュサーバーとは？
13) ＣＤＮとは？
14) 同期通信とは？
15) Ajaxとは？
16)Web APIとは？
17) マッシュアップとは？
18) ↑のメリットデメリットは？
19) CGIとは？
20) CGIへのデータの渡し方4種？？


解答
1)ウェブブラウザとウェブサーバ。ユーザーインターフェースなど表面のやりとり。
2) アプリサーバー。ユーザーからのリクエストを受け、java,ruby,phpなどを実行して処理する。
3) 主にデータの管理を行っている。データベースサーバーなど。

4) model, view, controllerの3つに分けてアプリケーションを設計すること。
5) データ処理と業務処理
6) 結果をユーザに送る部分を担当
7) ユーザーの命令を受けて、viewやmodelに指示を出す
8) webサーバーの窓口を増やして、一台当たりの負担を減らし、どこかがダウンしてもサービスを続けられるような構成。
9) webサーバから情報を受け取り、ユーザーに表示するプログラム。
10) ウェブサイトにアクセスして行う一連の行動のこと。セッションIDをcookieに含め、ユーザーの状態を管理する。
11)  通信やデータベース処理でのそれ以上分割できない作業単位。トランザクションごとに成功か失敗か、しかない。
12) リクエストに対するレスポンスを覚え、webサーバーやＤＢＭＳに負担を掛けないようにするサーバー。
13)  Contents Delivery Network. 大きなサイズのコンテンツをより速く配信できるようにするキャッシュサーバーの集合体。
								CDNを利用することで、オリジンサーバへのアクセス負荷を軽減させることができる。
14)  データ通信のリクエストを出してからレスポンスが来るまで待つ通信方式。非同期通信では、待っている間にも別の処理をする。
15) Asynchronous Javascript XML.クライアントサイドのjsがwebサーバと直接通信する。サーバ負荷が低い。
16) ユーザではなくプログラムがデータベースやサービスにアクセスする窓口。
17) APIを組み合わせて新しいウェブサービスを生み出すこと。
18) 各社が手間暇かけて作ったプログラムを簡単に利用できる。各社の仕様変更の影響を受けやすい。
19) Common Gateway Interface.クライアントのリクエストを受け、サーバが外部プログラムを呼び出して処理を行ってクライアントに返すための仕組み。
20) リンクに情報そのものを載せるコマンドライン引数渡し、参照を載せるパス渡し、GETメソッド、POSTメソッド。